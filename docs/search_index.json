[["index.html", "Intro to Spatial Mapping Overview", " Intro to Spatial Mapping Tara Pozzi and Reed Kenny 2023-03-08 Overview In this workshop, we will cover how to bring in different sources of spatial data, as well as how to do spatial data wrangling so you can make a map. We will but using R packages: tidycensus, tmap, and leaflet. "],["intro-to-spatial-data.html", "Intro to Spatial Data", " Intro to Spatial Data This workshop borrows largely from Noli Brazil’s class CRD 230: Spatial Methods in Community Research This workshop will cover some useful packages to wrangle and visualize spatial data. Specifically, we will learn how to pull in data from a few different sources, set a Coordinate Reference System, and create a map. The example here mostly works with vector data, which is characterized by real world objects like a tree, building, forest, etc. The two main packages that deal with vector data in R: sp: the original spatial package in R (first released in 2005) that has a complex data structure sf: much newer, so not as well established as sp, but it is easier to use than sp and is tidy friendly SF stands for “simple feature”. It sees any real-word object (or vector) as a feature and a feature can have both a geometry of where the feature is located and attributes associated with it. For example, a county is a feature with a polygon shape and can have attributes like population, number of hospitals, etc. associated with it. Another example could be a UC Davis, which would have a point geometry. Although, this workshop mostly covers vector data, it will also touch on another type of spatial data called raster data. Raster data is made up of pixels/cells that form a grid filled with information, that is typically continuous in nature (e.g., elevation temperature, land use). "],["spatial-data-workflow.html", "Spatial Data Workflow", " Spatial Data Workflow Here is a sample spatial data workflow: 1. Bring in spatial data of interest into R 2. Wrangle data into desired format (e.g., intersect/within/clip, merge multiple spatial dataframes, areal interpolation, etc.) 3. Set Coordinate Reference System (and potentially reproject or specify measurement units) 4. Map data "],["mapping-trees-in-davis-example.html", "Mapping trees in Davis Example 0.1 Bring in data 0.2 Data wrangling 0.3 Coordinate Reference System 0.4 Mapping the data", " Mapping trees in Davis Example I am curious about the spatial distribution of fruit trees in Davis, and how this distribution pattern relates to population size and median housing value in Davis. In order to examine this, we will need to bring in US Census data for the City of Davis, as well as point data from fallingfruit.org 0.1 Bring in data Bring in all datasets of interest. In our case, we are going to use three sources of data: 1) City of Davis boundary, 2) census tract data for population and median housing value, and 3) fallenfruit.org fruit tree locations. # You will need to sign up for a Census API Key if you are interested in pulling in US Census data ## Request an API key here: https://api.census.gov/data/key_signup.html #census_api_key(&quot;3f1a61d7b9d2f870de53940d461dda896938261b&quot;, install = TRUE) #now stored in my R environment # The tigris packages provides a way to directly download incorporated city footprints ## Pull in in places data for California pl &lt;- places(state = &quot;CA&quot;, year = 2020, cb = FALSE) ## Now let&#39;s just isolate the boundary for the City of Davis davis &lt;- pl %&gt;% filter(NAME == &quot;Davis&quot;) ## Take a look at the dataframe glimpse(davis) # Let&#39;s also pull in some census tract data from the City of Davis ## First, let&#39;s look at what variables are available v20 &lt;- load_variables(2020, &quot;acs5&quot;, cache=TRUE) # load variable options ## Now that we have chosen our variables of interest, let&#39;s pull in that data ca.tracts &lt;- get_acs( geography = &quot;tract&quot;, year = 2020, # final year variables = c(totp = &quot;B01003_001&quot;, #median income medhouse = &quot;B25077_001&quot;), #Median housing value for owner-occupied housing units state = &quot;CA&quot;, output= &quot;wide&quot;, survey = &quot;acs5&quot;, #this loads the data from the last 5 years of acs records geometry = TRUE, cb = FALSE ) # Now bring in fallingfruit.org ## I went onto the website and directly downloaded the csv file fruit &lt;- read.csv(&quot;data/data.csv&quot;) 0.2 Data wrangling Oftentimes, you may want to subset spatial data relative to other spatial data. Some common spatial data wrangling tasks: Intersect: keeps all polygons that intersect with the specified spatial boundary Within: keeps all polygons that are wholy within the specified spatial boundary Clipping: clips polygons based on specific spatial extents Areal interpolation: “allocation of data from one set of zones to a second overlapping set of zones that may or may not perfectly align spatially” For this example, I am only interested in the distribuition of fruit trees within Davis. The ms_clip function from rmapshaper is useful for clipping data to the spatial extents of Davis. ## Now I am only interested in Davis census tracts, so I will use the city of davis boundary to clip the tracts ## This function comes from the rmapshaper package davis.tracts &lt;- ms_clip(target = ca.tracts, clip = davis, remove_slivers = TRUE) 0.3 Coordinate Reference System Now that we have all of our data, we need to make sure that each dataset has the same Coordinate Reference System (CRS). The CRS has two parts: Geographic Coordinate System (GCS): three dimensional spherical surface. The GCS is made up of the ellipse (how the earth’s roundness is calculated) and the datum (coordinate system). Projected Coordinate System (PCS), or “projection”: Flattens the GCS into a two-dimensional Both GCS and PCS need to be specified when working with spatial data! In order to do this, you will first need to find out what CRS your spatial dataset was created in initially. # Check CRS of all three datasets class(davis) st_crs(davis) #NAD83 st_crs(davis)$proj4string #&quot;+proj=longlat +datum=NAD83 +no_defs&quot; st_crs(davis)$units #NULL st_crs(davis.tracts) #NAD83 st_crs(davis.tracts)$proj4string #&quot;+proj=longlat +datum=NAD83 +no_defs&quot; st_crs(davis.tracts)$units #NULL st_crs(fruit) #NA st_crs(fruit)$proj4string #NA # So we can see that both the davis and ca.tracts dataframes are in NAD 83, so let&#39;s reproject the fruit dataframe to also be in this projection # Reprojection ## First, establish the CRS for the fruit dataset based on how it was created intially ## Since fruit is point data, the projected coordinate system is already set because latitude and longitude are the X-Y coordinates but we need to tell R this fruit.sf &lt;- fruit %&gt;% st_as_sf(coords = c(&quot;lng&quot;, &quot;lat&quot;), crs = &quot;+proj=longlat +datum=WGS84 +ellps=WGS84&quot;) st_crs(fruit.sf)# +proj=longlat +datum=WGS84 +ellps=WGS84 ## Now let&#39;s reproject so it is on the same coordinate system as the other dataframes ### By transform to proj = utm, now the CRS can handle distance measures ### UTM: Universal Transverse Mercator works in meters fruit.utm &lt;- fruit.sf %&gt;% st_transform(crs = &quot;+proj=utm +zone=10 +datum=NAD83 +ellps=GRS80&quot;) ## Reproject davis and ca.tracts to also be in UTM davis.utm &lt;- davis %&gt;% st_transform(crs = &quot;+proj=utm +zone=10 +datum=NAD83 +ellps=GRS80&quot;) davis.tracts.utm &lt;- davis.tracts %&gt;% st_transform(crs = &quot;+proj=utm +zone=10 +datum=NAD83 +ellps=GRS80&quot;) # Great, nows lets check to see if all dataframes are on the same CRS st_crs(fruit.utm) == st_crs(davis.utm) #TRUE st_crs(davis.utm) == st_crs(davis.tracts.utm) #TRUE 0.4 Mapping the data Finally, we are at the point where we can map the data! Let’s first see what mapping it with tmap looks like. # Map the point data over the census tract data ## tmap tm_shape(davis.tracts.utm) + tm_polygons(col = &quot;medhouseE&quot;, style = &quot;quantile&quot;, palette = &quot;Blues&quot;, title = &quot;Median Housing Value ($)&quot;) + tm_shape(fruit.utm) + tm_dots(col = &quot;green&quot;) + #tm_text(&quot;types&quot;) + tm_scale_bar(breaks = c(0, 1, 2), text.size = 1, position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_compass(type = &quot;4star&quot;, position = c(&quot;right&quot;, &quot;bottom&quot;)) + tm_layout(main.title = &quot;Fruit Trees in Davis&quot;, main.title.size = 1.25, main.title.position=&quot;center&quot;, legend.outside = TRUE, legend.outside.position = &quot;right&quot;, frame = FALSE) Now let’s try mapping with leaflet. ## need to reproject davis.tracts data to be +proj=longlat davis.tracts.sf &lt;- davis.tracts %&gt;% st_transform(crs = &quot;+proj=longlat +datum=WGS84 +ellps=WGS84&quot;) leaflet() %&gt;% addTiles() %&gt;% addMarkers(data = fruit.sf, popup = ~as.character(types), label = ~as.character(types)) %&gt;% addPolygons(data = davis.tracts.sf, color = ~colorQuantile(&quot;Blues&quot;, totpE, n = 5)(totpE), weight = 1, smoothFactor = 0.5, opacity = 1.0, fillOpacity = 0.5, highlightOptions = highlightOptions(color = &quot;white&quot;, weight = 2, bringToFront = TRUE)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
